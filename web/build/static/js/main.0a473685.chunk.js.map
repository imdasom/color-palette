{"version":3,"sources":["helper/history.js","components/dynamicchild/DynamicChildComponent.js","pages/DynamicChildContainer.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","history","history__WEBPACK_IMPORTED_MODULE_0__","createBrowserHistory","DynamicChildComponent","onClickAddItem","event","_this$props","_this","props","itemList","itemPolicy","eventHandlers","length","maxItemLength","alert","concat","newItemList","uiItemId","Date","getTime","itemName","itemPrice","updateItemList","itemListComponent","this","map","item","react_default","a","createElement","data-testid","key","value","type","placeholder","react","onClick","Component","DynamicChildContainer","state","setState","_this$state","dynamicchild_DynamicChildComponent","PaletteCreate","lazy","Promise","all","e","then","bind","PaletteInfo","App","react_router","fallback","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a473685.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\nexport const history = createBrowserHistory();","import React, {Component, Fragment} from 'react';\r\n\r\nclass DynamicChildComponent extends Component {\r\n  onClickAddItem = (event) => {\r\n    const { itemList, itemPolicy, eventHandlers } = this.props;\r\n    if(itemList.length >= itemPolicy.maxItemLength) {\r\n      alert(`max item count: ${itemPolicy.maxItemLength}`);\r\n    } else {\r\n      const newItemList = itemList.concat({uiItemId: new Date().getTime(), itemName: '', itemPrice: ''});\r\n      eventHandlers.updateItemList(event, newItemList);\r\n    }\r\n  }\r\n  render() {\r\n    const { itemList } = this.props;\r\n    const itemListComponent = itemList.map((item) =>\r\n      <li data-testid=\"itemComponent\" key={item.uiItemId}>\r\n        <select>\r\n          <option value=\"\">팔레트 종류를 선택하세요</option>\r\n          <option value=\"COLOR\">색상</option>\r\n          <option value=\"PATTERN\">패턴</option>\r\n          <option value=\"IMAGE\">이미지</option>\r\n        </select>\r\n        <input type=\"text\" placeholder=\"name\" value={item.itemName}/>\r\n      </li>\r\n    );\r\n    return (\r\n      <Fragment>\r\n        <h4>Create New Palette</h4>\r\n        <div>\r\n          <input type=\"text\" placeholder=\"palette name\"/>\r\n        </div>\r\n        <div>\r\n          <button type=\"button\" onClick={this.onClickAddItem}>+ Add Item</button>\r\n        </div>\r\n        <div>\r\n          <ul>\r\n            { itemListComponent }\r\n          </ul>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DynamicChildComponent;","import React, {Component, Fragment} from 'react';\r\nimport { DynamicChildComponent } from \"components/dynamicchild\";\r\n\r\nclass DynamicChildContainer extends Component {\r\n  state = {\r\n    itemList: []\r\n    , itemPolicy: {\r\n      maxItemLength: 5\r\n    }\r\n  };\r\n  updateItemList = (event, newItemList) => {\r\n    this.setState({itemList: newItemList});\r\n  };\r\n  render() {\r\n    const { itemList, itemPolicy } = this.state;\r\n    return (\r\n      <Fragment>\r\n        <h2>Dynamic Child UI Test Page</h2>\r\n        <DynamicChildComponent\r\n          itemList={itemList}\r\n          eventHandlers={{\r\n            updateItemList: this.updateItemList\r\n          }}\r\n          itemPolicy={itemPolicy}\r\n        />\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DynamicChildContainer;","import { lazy } from 'react';\r\nexport const PaletteCreate = lazy(() => import('./PaletteCreate'));\r\nexport const PaletteInfo = lazy(() => import('./PaletteInfo'));\r\nexport { default as DynamicChildContainer } from './DynamicChildContainer';\r\n","import React, { Suspense } from 'react';\r\nimport { Router, Route, Switch } from 'react-router-dom';\r\nimport { PaletteCreate, PaletteInfo, DynamicChildContainer } from 'pages';\r\nimport { history } from 'helper/history'\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Router history={history}>\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <div>\r\n            <Route exact path=\"/\" component={PaletteCreate} />\r\n            <Switch>\r\n              <Route exact path=\"/palette/new\" component={PaletteCreate} />\r\n              <Route exact path=\"/palette/:id\" component={PaletteInfo} />\r\n              <Route exact path=\"/tdd/dynamic-child\" component={DynamicChildContainer} />\r\n            </Switch>\r\n          </div>\r\n        </Suspense>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}