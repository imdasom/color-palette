{"version":3,"sources":["helper/LocalStorageUtil.js","pages/PaletteInfo.js"],"names":["LocalStorageUtil","haveItLocalStorage","key","value","localStorage","getItem","String","toggleLikeLocalStorage","haveIt","removeItem","setItem","PaletteInfo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","classNames","palette","id","items","type","content","hex","like","palettes","setPalette","response","data","setState","setPalettes","setLikeState","objectSpread","setLikeStateAtList","map","item","index","handleLikeClick","itemsToString","PaletteActions","unlike","likeCount","error","console","log","alert","join","getColorItems","react_default","a","createElement","components_palette","className","colorItem","getPalette","focused","liked","date","Date","created","likeButtonProps","handleClick","itemContainerClassNames","data-testid","match","params","getPalettes","page","pageSize","_this2","_this$state","focusedPalette","paletteList","Header","target","rel","href","alt","src","Component"],"mappings":"4MAAaA,EAAmB,CAC9BC,mBAD8B,SACXC,EAAKC,GACtB,OAAOC,aAAaC,QAAQH,KAASI,OAAOH,IAE9CI,uBAJ8B,SAIPC,EAAQN,EAAKC,GAC/BK,EACDJ,aAAaK,WAAWP,GAExBE,aAAaM,QAAQR,EAAKC,KCD1BQ,6BAeJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAfRQ,MAAQ,CACNC,WAAY,CAAC,KAAM,KAAM,KAAM,MAC9BC,QAAS,CACRC,IAAK,EACJC,MAAO,CACN,CAAEC,KAAM,QAASC,QAAS,CAACC,IAAK,WAC/B,CAAEF,KAAM,QAASC,QAAS,CAACC,IAAK,WAChC,CAAEF,KAAM,QAASC,QAAS,CAACC,IAAK,WAChC,CAAEF,KAAM,QAASC,QAAS,CAACC,IAAK,YAElCC,KAAM,GAERC,SAAU,IAEMhB,EAiBnBiB,WAAa,SAACC,GACZ,IAAMT,EAAUS,EAASC,KACzBnB,EAAKoB,SAAS,CAAEX,QAASA,KAnBRT,EAqBnBqB,YAAc,SAACH,GACb,IAAMF,EAAWE,EAASC,KAC1BnB,EAAKoB,SAAS,CAAEJ,SAAUA,KAvBThB,EAyBnBsB,aAAe,SAACP,GAAS,IACfN,EAAYT,EAAKO,MAAjBE,QACRT,EAAKoB,SAAS,CACZX,QAAQR,OAAAsB,EAAA,EAAAtB,CAAA,GAAMQ,EAAP,CAAgBM,KAAMA,OA5Bdf,EA+BnBwB,mBAAqB,SAACd,EAAIK,GAAS,IACzBC,EAAahB,EAAKO,MAAlBS,SACRhB,EAAKoB,SAAS,CACZJ,SAAUA,EAASS,IAAI,SAACC,EAAMC,GAC5B,OAAOD,EAAKhB,KAAOA,EAAZT,OAAAsB,EAAA,EAAAtB,CAAA,GAAsByB,EAAtB,CAA4BX,KAAMA,IAASW,OAnCrC1B,EAuCnB4B,gBAAkB,SAACnB,GACjB,IAAMpB,EAAMW,EAAK6B,cAAcpB,EAAQE,OACjCrB,EAAQmB,EAAQC,GAChBf,EAASR,EAAiBC,mBAAmBC,EAAKC,IAC7BK,EAASmC,IAAeC,OAASD,IAAef,MAEzEzB,EACE,SAAC4B,GACD,IAAMc,EAAYd,EAASC,KAC3BhC,EAAiBO,uBAAuBC,EAAQN,EAAKC,GACrDU,EAAKsB,aAAaU,GAClBhC,EAAKwB,mBAAmBlC,EAAO0C,IAE/B,SAACC,GACDC,QAAQC,IAAIF,GACZG,MAAMH,MAtDOjC,EA0DnB6B,cAAgB,SAAClB,GACf,MAAO,cAAgBA,EAAMc,IAAI,SAAAC,GAAI,OAAIA,EAAKb,QAAQC,MAAKuB,KAAK,KA3D/CrC,EA6DnBsC,cAAgB,SAAC7B,EAASD,GACxB,OAAOC,EAAQE,MAAMc,IACnB,SAACC,EAAMC,GAAW,OAChBY,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACErD,IAAKsC,EACLjB,GAAIiB,EACJgB,UAAWnC,EAAWmB,GACtBiB,UAAWlB,OApEA1B,EAyEnB6C,WAAa,SAACpC,EAASD,EAAYsC,GACjC,IAAMzD,EAAMW,EAAK6B,cAAcpB,EAAQE,OACjCrB,EAAQmB,EAAQC,GAChBqC,EAAQ5D,EAAiBC,mBAAmBC,EAAKC,GACjD0D,EAAO,IAAIC,KAAKxC,EAAQyC,SACxBC,EAAkB,CACtBpC,KAAMN,EAAQM,KACbqC,YAAa,WAAQpD,EAAK4B,gBAAgBnB,KAEvCE,EAAQX,EAAKsC,cAAc7B,EAASD,GAC1C,OACE+B,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACE/B,MAAOA,EACPwC,gBAAiBA,EACjBH,KAAMA,EACNF,QAASA,EACTC,MAAOA,EACPM,wBAAyB,UACzBC,cAAa,aAzFjBxB,IAAee,WACb9C,EAAMwD,MAAMC,OAAO9C,GAClBV,EAAKiB,WACL,SAAcgB,GACbG,MAAMH,KAGVH,IAAe2B,YACb,CAACC,KAAK,EAAGC,SAAS,IACjB3D,EAAKqB,YACL,SAAcY,GACbG,MAAMH,KAbOjC,wEAgGV,IAAA4D,EAAAzD,KAAA0D,EACmC1D,KAAKI,MAAvCE,EADDoD,EACCpD,QAASO,EADV6C,EACU7C,SAAUR,EADpBqD,EACoBrD,WACrBsD,EAAiB3D,KAAK0C,WAAWpC,EAASD,GAAY,GACtDuD,EAAc/C,EAASS,IAC3B,SAAChB,GACC,OAAOmD,EAAKf,WAAWpC,EAASD,GAAY,KAGhD,OACE+B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAQvD,QAASA,IACjB8B,EAAAC,EAAAC,cAAA,OAAK/B,GAAG,YAAYiC,UAAU,6BAC5BJ,EAAAC,EAAAC,cAAA,OAAK/B,GAAG,QACLoD,EACAC,GAEHxB,EAAAC,EAAAC,cAAA,OAAK/B,GAAG,QACN6B,EAAAC,EAAAC,cAAA,OAAK/B,GAAG,SAASiC,UAAU,WAA3B,gBACeJ,EAAAC,EAAAC,cAAA,KAAGwB,OAAO,SAASC,IAAI,aAAaC,KAAK,0CAAzC,WACb5B,EAAAC,EAAAC,cAAA,WAFF,WAEeF,EAAAC,EAAAC,cAAA,OAAK2B,IAAI,iCAAiCC,IAAI,iDAF7D,oBAhIcC,cA2IXxE","file":"static/js/7.121d64b2.chunk.js","sourcesContent":["export const LocalStorageUtil = {\r\n  haveItLocalStorage(key, value) {\r\n    return localStorage.getItem(key) === String(value);\r\n  },\r\n  toggleLikeLocalStorage(haveIt, key, value) {\r\n    if(haveIt) {\r\n      localStorage.removeItem(key);\r\n    } else {\r\n      localStorage.setItem(key, value)\r\n    }\r\n  }\r\n};\r\n","import React, { Component } from 'react';\r\nimport Header from \"./layout/Header\";\r\nimport { ColorItem, Palette, PaletteActions } from 'components/palette';\r\nimport { LocalStorageUtil } from 'helper/LocalStorageUtil';\r\nimport 'pages/Palettes.css';\r\nimport 'pages/PaletteInfo.scss';\r\n\r\nclass PaletteInfo extends Component {\r\n  state = {\r\n    classNames: ['c4', 'c3', 'c2', 'c1']\r\n    ,palette: {\r\n      id: -1\r\n      ,items: [\r\n        { type: 'COLOR', content: {hex: 'AAAAAA'} }\r\n        ,{ type: 'COLOR', content: {hex: 'BBBBBB'} }\r\n        ,{ type: 'COLOR', content: {hex: 'CCCCCC'} }\r\n        ,{ type: 'COLOR', content: {hex: 'DDDDDD'} }\r\n      ]\r\n      ,like: 0\r\n    }\r\n    ,palettes: []\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    PaletteActions.getPalette(\r\n      props.match.params.id\r\n      ,this.setPalette\r\n      ,function fail(error) {\r\n        alert(error);\r\n      }\r\n    );\r\n    PaletteActions.getPalettes(\r\n      {page:1, pageSize:16}\r\n      ,this.setPalettes\r\n      ,function fail(error) {\r\n        alert(error);\r\n      }\r\n    )\r\n  }\r\n  setPalette = (response) => {\r\n    const palette = response.data;\r\n    this.setState({ palette: palette });\r\n  };\r\n  setPalettes = (response) => {\r\n    const palettes = response.data;\r\n    this.setState({ palettes: palettes });\r\n  };\r\n  setLikeState = (like) => {\r\n    const { palette } = this.state;\r\n    this.setState({\r\n      palette: { ...palette, like: like }\r\n    });\r\n  };\r\n  setLikeStateAtList = (id, like) => {\r\n    const { palettes } = this.state;\r\n    this.setState({\r\n      palettes: palettes.map((item, index) => {\r\n        return item.id === id ? { ...item, like: like } : item;\r\n      })\r\n    });\r\n  };\r\n  handleLikeClick = (palette) => {\r\n    const key = this.itemsToString(palette.items);\r\n    const value = palette.id;\r\n    const haveIt = LocalStorageUtil.haveItLocalStorage(key, value);\r\n    const likeOrUnlikeAction = haveIt ? PaletteActions.unlike : PaletteActions.like;\r\n    likeOrUnlikeAction(\r\n      value\r\n      , (response) => {\r\n        const likeCount = response.data;\r\n        LocalStorageUtil.toggleLikeLocalStorage(haveIt, key, value);\r\n        this.setLikeState(likeCount);\r\n        this.setLikeStateAtList(value, likeCount);\r\n      }\r\n      , (error) => {\r\n        console.log(error);\r\n        alert(error);\r\n      }\r\n    );\r\n  };\r\n  itemsToString = (items) => {\r\n    return 'thepalette-' + items.map(item => item.content.hex).join('');\r\n  };\r\n  getColorItems = (palette, classNames) => {\r\n    return palette.items.map(\r\n      (item, index) => {return (\r\n        <ColorItem\r\n          key={index}\r\n          id={index}\r\n          className={classNames[index]}\r\n          colorItem={item}\r\n        />\r\n      )}\r\n    );\r\n  };\r\n  getPalette = (palette, classNames, focused) => {\r\n    const key = this.itemsToString(palette.items);\r\n    const value = palette.id;\r\n    const liked = LocalStorageUtil.haveItLocalStorage(key, value);\r\n    const date = new Date(palette.created);\r\n    const likeButtonProps = {\r\n      like: palette.like\r\n      ,handleClick: () => { this.handleLikeClick(palette); }\r\n    };\r\n    const items = this.getColorItems(palette, classNames);\r\n    return (\r\n      <Palette\r\n        items={items}\r\n        likeButtonProps={likeButtonProps}\r\n        date={date}\r\n        focused={focused}\r\n        liked={liked}\r\n        itemContainerClassNames={'palette'}\r\n        data-testid={'Palette'}\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { palette, palettes, classNames } = this.state;\r\n    const focusedPalette = this.getPalette(palette, classNames, true);\r\n    const paletteList = palettes.map(\r\n      (palette) => {\r\n        return this.getPalette(palette, classNames, false);\r\n      }\r\n    );\r\n    return (\r\n      <div>\r\n        <Header palette={palette} />\r\n        <div id=\"container\" className=\"wrap wrapper-palette-info\">\r\n          <div id=\"feed\">\r\n            {focusedPalette}\r\n            {paletteList}\r\n          </div>\r\n          <div id=\"side\">\r\n            <div id=\"credit\" className=\"section\">\r\n              Made with by <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/imdasom/the-palette\">imdasom</a>\r\n              <br/>Version <img alt=\"Color Hunt Palettes Heart Icon\" src=\"/img/color-hunt-palettes-icon-heart-blue.png\" /> 0.1.1\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PaletteInfo;"],"sourceRoot":""}